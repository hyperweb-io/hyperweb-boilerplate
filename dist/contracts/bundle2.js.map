{
  "version": 3,
  "sources": ["../../src/contract2/utils.ts", "../../src/contract2/sdk.ts", "../../src/contract2/amm.ts", "../../src/contract2/index.ts"],
  "sourcesContent": ["import { State } from \"./types\";\n\nexport function storeEntry(state: State, keys: string[], value: any) {\n  const key = keys.join(\"/\");\n\n  return {\n    get value() {\n      return state.get(key) ?? value;\n    },\n\n    set value(newValue) {\n      state.set(key, newValue);\n    },\n  }\n}\n", "import { State, StateEntries } from \"./types\";\nimport { storeEntry } from \"./utils\";\n\nexport function store<T>(stateEntries: T) {\n  return (state: State): T => {\n    let storeMap = {} as T;\n\n    function defineStore(keys: string[], value: any) {\n      if (typeof value === \"function\") {\n        return (subkey: string) => {\n          return defineStore([...keys, subkey], value(subkey));\n        };\n      }\n      return storeEntry(state, keys, value);\n    }\n\n    Object.entries(stateEntries).forEach(([key, value]) => {\n      (storeMap as any)[key] = defineStore([key], value);\n    });\n\n    return storeMap;\n  };\n}\n", "// @ts-ignore, `~bank` is an internal package\nimport { getBalance, sendCoins } from '~bank';\n\nimport { store } from './sdk';\nimport { Msg, StateEntries, State } from './types'\n\nconst contractStore = store({\n  totalSupply: 0,\n  balance: (address: string) => 0,\n  reserves: [0, 0],\n});\n\nexport class Contract {\n  msg: Msg;\n  address: string;\n  totalSupply: any;\n  balance: any;\n  reserves: any;\n\n  constructor(state: State, {msg, address}: {msg: Msg, address: string}) {\n    this.msg = msg;\n    this.address = address;\n\n    const store = contractStore(state);\n    this.totalSupply = store.totalSupply;\n    this.balance = store.balance;\n    this.reserves = store.reserves;\n  }\n\n  token0: string = \"USDC\";\n  token1: string = \"ATOM\";\n\n  schema = {\n    getTotalSupply: {\n      type: \"number\",\n    }\n  }\n\n  getTotalSupply() {\n    return this.totalSupply.value;\n  }\n\n  getBalance(address: string) {\n    return this.balance(address).value;\n  }\n\n  getReserves() {\n    return this.reserves.value;\n  }\n\n  #getBankBalance(address: string, token: string) {\n    return getBalance(address, token);\n  }\n\n  #mint(to: string, amount: number) {\n    const balance = this.balance(to).value;\n    this.balance(to).value = balance + amount;\n    this.totalSupply.value += amount;\n  }\n\n  #burn(from: string, amount: number) {\n    const balance = this.balance(from).value;\n    if (balance < amount) {\n      throw Error(\"insufficient balance\");\n    }\n    this.balance(from).value = balance - amount;\n    this.totalSupply.value -= amount;\n  }\n\n  #update(amount0: number, amount1: number) {\n    const [reserve0, reserve1] = this.reserves.value;\n    this.reserves.value = [\n      reserve0 + amount0,\n      reserve1 + amount1,\n    ];\n  }\n\n  swap({tokenIn, amountIn}: {tokenIn: string, amountIn: number}) {\n    const isToken0 = tokenIn == this.token0;\n    const isToken1 = tokenIn == this.token1;\n\n    if (!isToken0 && !isToken1) {\n      throw Error(\"invalid token\");\n    }\n\n    const [reserve0, reserve1] = this.reserves.value;\n    let tokenOut, reserveIn, reserveOut;\n\n    [tokenIn, tokenOut, reserveIn, reserveOut] =\n      isToken0\n        ? [this.token0, this.token1, reserve0, reserve1]\n        : [this.token1, this.token0, reserve1, reserve0];\n\n    sendCoins(this.msg.sender, this.address, {\n      [tokenIn]: amountIn,\n    });\n\n    const amountInWithFee = amountIn * 997 / 1000;\n    const amountOut = (reserveOut * amountInWithFee) / (reserveIn + amountInWithFee);\n\n    sendCoins(this.address, this.msg.sender, {\n      [tokenOut]: amountOut,\n    });\n\n    this.#update(\n      this.#getBankBalance(this.address, this.token0).amount,\n      this.#getBankBalance(this.address, this.token1).amount,\n    );\n\n    return amountOut;\n  }\n\n  addLiquidity({amount0, amount1}: {amount0: number, amount1: number}) {\n    sendCoins(this.msg.sender, this.address, {\n      [this.token0]: amount0,\n      [this.token1]: amount1,\n    });\n\n    const [reserve0, reserve1] = this.reserves.value;\n\n    if (reserve0 > 0 || reserve1 > 0) {\n      if (reserve0 * amount1 != reserve1 * amount0) {\n        throw Error(\"invalid liquidity\");\n      }\n    }\n\n    let shares = 0\n    if (this.totalSupply.value > 0) {\n      shares = Math.sqrt(amount0 * amount1)\n    } else {\n      shares = Math.min(\n        (amount0 * this.totalSupply.value) / reserve0,\n        (amount1 * this.totalSupply.value) / reserve1,\n      )\n    }\n\n    this.#mint(this.msg.sender, shares);\n\n    this.#update(\n      this.#getBankBalance(this.address, this.token0).amount,\n      this.#getBankBalance(this.address, this.token1).amount,\n    );\n\n    return shares;\n  }\n\n  removeLiquidity({shares}: {shares: number}) {\n    const bal0 = this.#getBankBalance(this.address, this.token0);\n    const bal1 = this.#getBankBalance(this.address, this.token1);\n    const totalSupply = this.totalSupply.value;\n\n    const amount0 = bal0 * shares / totalSupply;\n    const amount1 = bal1 * shares / totalSupply;\n    this.#burn(this.msg.sender, shares);\n    this.#update(bal0 - amount0, bal1 - amount1);\n    sendCoins(this.address, this.msg.sender, {\n      [this.token0]: amount0,\n      [this.token1]: amount1,\n    });\n\n    return [amount0, amount1];\n  }\n}\n", "export * from './amm'\nexport * from './types'\nexport * from './utils'\nexport * from './sdk'\n\nimport { Contract } from './amm'\n\nexport default Contract;\n"],
  "mappings": "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",
  "names": ["store"]
}
